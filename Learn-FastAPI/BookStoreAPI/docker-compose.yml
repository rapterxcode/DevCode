version: '3.8'

services:
  # FastAPI Application
  bookstore-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bookstore-api
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=sqlite:///./data/bookstore.db
    volumes:
      - bookstore_data:/app/data
      - ./main.py:/app/main.py  # For development hot reload
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - bookstore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (Production option)
  postgres:
    image: postgres:15-alpine
    container_name: bookstore-postgres
    environment:
      POSTGRES_DB: bookstore
      POSTGRES_USER: bookstore_user
      POSTGRES_PASSWORD: bookstore_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Optional: Initial schema
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - bookstore-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bookstore_user -d bookstore"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Optional for future scaling)
  redis:
    image: redis:7-alpine
    container_name: bookstore-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - bookstore-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx Load Balancer (Production setup)
  nginx:
    image: nginx:alpine
    container_name: bookstore-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro  # SSL certificates
    depends_on:
      - bookstore-api
    restart: unless-stopped
    networks:
      - bookstore-network

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: bookstore-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - bookstore-network

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: bookstore-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - bookstore-network

volumes:
  bookstore_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  bookstore-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16